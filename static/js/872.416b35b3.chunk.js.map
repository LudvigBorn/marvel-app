{"version":3,"file":"static/js/872.416b35b3.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/errorBoundary/ErrorBoundary.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/charGroup/CharGroup.js","components/pages/MainPage.js"],"sourcesContent":["import { useState,useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService'\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n  const [char,setChar] = useState({})\n\n  const {loading,error,process,setProcess,getCharacter,clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n\n    // const timerId = setInterval(updateChar,6000)\n\n    // return () => {\n    //   clearInterval(timerId)\n    // }\n  }, []);\n\n\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const updateChar = () => {\n    clearError()\n    const id = Math.floor(Math.random() * (1011400 -1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(()=> setProcess('confirmed'))\n  }\n\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spiner = loading ? <Spinner /> : null;\n\n  // const content = !(loading || error) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {/* {errorMessage}\n      {spiner}\n      {content} */}\n      {setContent(process,View,char)}\n\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n}\n\nconst View = ({data}) => {\n\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = {'objectFit' : 'cover'};\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { 'objectFit' : \"contain\" };\n  }\n    return (\n      <div className=\"randomchar__block\">\n        <img\n          src={thumbnail}\n          alt=\"Random character\"\n          className=\"randomchar__img\"\n          style={imgStyle}\n        />\n        <div className=\"randomchar__info\">\n          <p className=\"randomchar__name\">{name}</p>\n          <p className=\"randomchar__descr\">{description}</p>\n          <div className=\"randomchar__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n};\n\nexport default RandomChar;","import './charList.scss';\nimport { useState,useEffect,useRef,useMemo } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\nimport PropTypes from \"prop-types\";\nimport {TransitionGroup,CSSTransition} from 'react-transition-group'\n//import setContent from '../../utils/setContent';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component/>  :<Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst  CharList = (props) => {\n  const [charList,setCharList] = useState([]);\n  const [newItemLoading,setNewItemLoading] = useState(false);\n  const [offset,setOffset] = useState(210);\n  const [charEnded,setCharEnded] = useState(false);\n\n\n  const {loading,error,process,setProcess,getAllCharacters} = useMarvelService();\n\n  useEffect(() => {\n    onReqest(offset,true);\n  },[])\n\n  const onReqest = (offset,initial) => {\n    setNewItemLoading(!initial);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(()=>setProcess('confirmed'))\n  }\n\n  // componentDidMount() {\n  //   this.onReqest();\n  //   window.addEventListener('scroll', (event) => {\n  //     // const scrollHeight = Math.max(\n  //     //   document.body.scrollHeight,\n  //     //   document.documentElement.scrollHeight,\n  //     //   document.body.offsetHeight,\n  //     //   document.documentElement.offsetHeight,\n  //     //   document.body.clientHeight,\n  //     //   document.documentElement.clientHeight\n  //     // );\n  //     this.onScroll();\n  //     })\n  // }\n\n  // componentWillUnmount() {\n  //       this.setState({\n  //         charList: [],\n  //       });\n  //   window.removeEventListener('scroll',this.onScroll)\n  // }\n  // onScroll = () => {\n  //   const {offset,newItemLoading,charEnded} = this.state\n  //   if (newItemLoading) return;\n  //   if (charEnded) {\n  //     window.removeEventListener('scroll',this.onScroll)\n  //   }\n  //   if (document.documentElement.clientHeight + window.pageYOffset >=\n  //     document.documentElement.scrollHeight\n  //   ) {\n  //     this.onReqest(offset);\n  //   }\n  // }\n\n\n\n\n\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if(newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charList => [...charList, ...newCharList]);\n    setNewItemLoading(false);\n    setOffset(offset => offset + 9)\n    setCharEnded(ended)\n  }\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  }\n\n  function renderItems(arr) {\n    console.log('render')\n    const items = arr.map((item,i) => {\n      let imgStyle ={'objectFit': 'cover'};\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n         imgStyle = { 'objectFit': \"unset\" };\n      }\n      return (\n        <CSSTransition\n          key={item.id}\n          timeout={500}\n          classNames=\"item\"\n        >\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            //key={item.id}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    })\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n\n  }\n  //const items = renderItems(charList)\n\n  // const errorMessage = error ? <ErrorMessage/> : null\n  // const spinner = loading && !newItemLoading ? <Spinner/> : null\n\n\n  const elements = useMemo(()=> {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n  },[process])\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n\n        className=\"button button__main button__long\"\n        onClick={() => onReqest(offset)}\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n\n}\n\nCharList.prototypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\n\nexport default CharList;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nclass ErrorBoundary extends Component {\n  state = {\n    error: false\n  }\n\n  componentDidCatch(error,errorInfo) {\n    console.log(error,errorInfo)\n    this.setState({\n      error: true\n    })\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage/>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import './charInfo.scss';\n\n\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\nimport useMarvelService from '../../services/MarvelService';\nimport { useState,useEffect } from 'react';\nimport setContent from '../../utils/setContent'\nconst CharInfo = (props) => {\n\n    const [char,setChar] = useState(null);\n\n    const {getCharacter,clearError,process,setProcess}= useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n\n\n    // componentDidUpdate(prevProps,prevS) {\n    //     if (this.props.charId !== prevProps.charId) {\n    //         this.updateChar();\n    //     }\n    // }\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n          .then(onCharLoaded)\n          .then(() => setProcess(\"confirmed\"));\n    }\n\n    // const skeleton = char || loading || error ? null : <Skeleton />;\n    // const errorMessage = error ? <ErrorMessage /> : null;\n    // const spinner = loading ? <Spinner /> : null;\n    // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n      <div className=\"char__info\">\n        {setContent(process,View,char)}\n      </div>\n    );\n}\n\nconst View = ({data}) => {\n    const { name, description, thumbnail, homepage, wiki,comics } = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': \"contain\" };\n    }\n\n    return (\n      <>\n        <div className=\"char__basics\">\n          <img src={thumbnail} alt={name} style ={imgStyle}/>\n          <div>\n            <div className=\"char__info-name\">{name}</div>\n            <div className=\"char__btns\">\n              <a href={homepage} className=\"button button__main\">\n                <div className=\"inner\">homepage</div>\n              </a>\n              <a href={wiki} className=\"button button__secondary\">\n                <div className=\"inner\">Wiki</div>\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"char__descr\">{description}</div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics with this character'}\n            {\n                comics.slice(0,5).map((item,i) => {\n                    const id = item.resourceURI.split('/').at(-1)\n                    return (\n                      <li key={i} className=\"char__comics-item\">\n                        <Link to={`/comics/${id}`}>{item.name}</Link>\n                      </li>\n                    );\n                })\n            }\n\n        </ul>\n      </>\n    );\n}\n\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\n\nexport default CharInfo;","import { useState } from \"react\";\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage as FormikErrorMessage,\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n//import setContent from \"../../utils/setContent\";\n\nimport \"./charSearchForm.scss\";\n\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      break\n    case \"loading\":\n      break\n    case \"confirmed\":\n      return <Component data={data} />;\n    case 'not_found':\n      return (\n        <div className=\"char__search-error\">\n          The character was not found. Check the name and try again\n        </div>\n      )\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst Confirmed = ({data}) => {\n  return (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {data[0].name} page?\n      </div>\n      <Link\n        to={`/char/${data[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  )\n}\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { loading, getCharacterByName, clearError,process,setProcess } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n\n    char.length > 0 ? setProcess(\"confirmed\") : setProcess(\"not_found\");\n  };\n\n\n  const updateChar = (name) => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n\n\n\n      // .then((char)=> {char.length > 0 ? setProcess(\"confirmed\") : setProcess('not_found')});\n  };\n\n  // const errorMessage = error ? (\n  //   <div className=\"char__search-critical-error\">\n  //     <ErrorMessage />\n  //   </div>\n  // ) : null;\n  // const results = !char ? null : char.length > 0 ? (\n\n  // ) : (\n\n  // );\n\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: \"\",\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required(\"This field is required\"),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={process === \"loading\"}\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component=\"div\"\n            className=\"char__search-error\"\n            name=\"charName\"\n          />\n        </Form>\n      </Formik>\n      {/* {results}\n      {errorMessage} */}\n      {setContent(process, Confirmed, char)}\n    </div>\n  );\n};\n\n\n\nexport default CharSearchForm;\n","import CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\n\nimport \"./charGroup.scss\";\n\nconst CharGroup = ({ selectedChar }) => {\n  console.log(selectedChar)\n  return (\n    <div className=\"char__group\">\n      <CharInfo charId={selectedChar} />\n      <ErrorBoundary>\n        <CharSearchForm />\n      </ErrorBoundary>\n    </div>\n  );\n\n};\nexport default CharGroup;","import RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\n//import CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\nimport { useState } from \"react\";\nimport decoration from \"../../resources/img/vision.png\";\nimport CharGroup from \"../charGroup/CharGroup\";\nimport { Helmet } from \"react-helmet\";\n\n\n\nconst MainPage = () => {\n\n\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  };\n  console.log('mp')\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information\" />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n\n        <ErrorBoundary>\n          <CharGroup selectedChar={selectedChar} />\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n"],"names":["View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","_jsx","src","alt","style","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","process","loading","error","setProcess","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onReqest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","console","log","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","display","prototypes","PropTypes","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","_createClass","value","errorInfo","this","setState","comics","_Fragment","slice","resourceURI","split","at","Link","to","charId","Confirmed","getCharacterByName","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","_ref2","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","CharInfo","CharSearchForm","Helmet","content","RandomChar","CharGroup","decoration"],"sourceRoot":""}